#!/usr/bin/env bash
set -e -o pipefail

ARGS_FILE="${repo_dir:?}/config/ARGS"
PACKAGES_INSTALL_FILE="${repo_dir:?}/config/PACKAGES_INSTALL"
PACKAGES_REMOVE_FILE="${repo_dir:?}/config/PACKAGES_REMOVE"

args_file_as_build_args_for_github() {
    while IFS="=" read -r key value; do
        echo "$key=$value"
    done < ${ARGS_FILE:?}
}

args_file_as_build_args_for_dockerflags() {
    local prefix="--build-arg "
    while IFS="=" read -r key value; do
        echo -n "${prefix}$key=\"$value\" "
    done < ${ARGS_FILE:?}
}

packages_to_install() {
    while IFS="=" read -r key value; do
        echo -n "$key=$value "
    done < "${PACKAGES_INSTALL_FILE:?}"
}

packages_to_remove() {
    while IFS="=" read -r key; do
        echo -n "$key "
    done < "${PACKAGES_REMOVE_FILE:?}"
}

github_env_dump() {
    args_file_as_build_args_for_github
    if [ -f "${PACKAGES_INSTALL_FILE:?}" ]; then
        echo "PACKAGES_TO_INSTALL=$(packages_to_install)"
    fi
    if [ -f "${PACKAGES_REMOVE_FILE:?}" ]; then
        echo "PACKAGES_TO_REMOVE=$(packages_to_remove)"
    fi
}

github_output_build_args() {
    output=$(github_env_dump)
    if [ -n "${GITHUB_OUTPUT}" ]; then
        echo "build_args<<EOF" >> ${GITHUB_OUTPUT:?}
        echo "${output:?}" >> ${GITHUB_OUTPUT:?}
        echo "EOF" >> ${GITHUB_OUTPUT:?}
    else
        # Convert the build args into a multi-line format
        # that will be accepted by Github workflows.
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo -e "::set-output name=build_args::${output:?}"
    fi
}

dockerflags_output_build_args() {
    # --build-arg format used with the docker build command.
    args_file_as_build_args_for_dockerflags
    if [ -f "${PACKAGES_INSTALL_FILE:?}" ]; then
        echo -n "--build-arg PACKAGES_TO_INSTALL=\"$(packages_to_install)\" "
    fi
    if [ -f "${PACKAGES_REMOVE_FILE:?}" ]; then
        echo -n "--build-arg PACKAGES_TO_REMOVE=\"$(packages_to_remove)\""
    fi
}
